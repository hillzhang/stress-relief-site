
import React, { useEffect, useRef, useState } from 'react'
type SceneId = 'rain'|'ocean'|'fireplace'|'white'|'pink'|'brown'
function useAudio(){ const ctxRef=useRef<AudioContext|null>(null); const masterRef=useRef<GainNode|null>(null); const ensure=async()=>{ if(!ctxRef.current){ const Ctx=(window as any).AudioContext||(window as any).webkitAudioContext; ctxRef.current=new Ctx(); masterRef.current=ctxRef.current.createGain(); masterRef.current.gain.value=0.4; masterRef.current.connect(ctxRef.current.destination) } if(ctxRef.current.state==='suspended') await ctxRef.current.resume(); return {ctx:ctxRef.current!, master:masterRef.current!} }; const suspend=async()=>{ if(ctxRef.current&&ctxRef.current.state==='running') await ctxRef.current.suspend() }; return {ensure,suspend,ctxRef,masterRef} }
function makeNoiseBuffer(ctx:AudioContext, seconds=2){ const b=ctx.createBuffer(1, seconds*ctx.sampleRate, ctx.sampleRate); const d=b.getChannelData(0); for(let i=0;i<d.length;i++) d[i]=Math.random()*2-1; return b }
function createNoise(ctx:AudioContext, type:SceneId){ const src=ctx.createBufferSource(); src.buffer=makeNoiseBuffer(ctx,4); src.loop=true; let node:AudioNode=src; const f=ctx.createBiquadFilter(); switch(type){ case'rain':f.type='bandpass';f.frequency.value=1000;f.Q.value=0.8;node.connect(f);node=f;break; case'ocean':f.type='lowpass';f.frequency.value=600;f.Q.value=0.0001;node.connect(f);node=f;break; case'fireplace':f.type='highpass';f.frequency.value=1200;f.Q.value=0.7;node.connect(f);node=f;break; case'pink':f.type='lowpass';f.frequency.value=1800;f.Q.value=0.0001;node.connect(f);node=f;break; case'brown':f.type='lowpass';f.frequency.value=400;f.Q.value=0.0001;node.connect(f);node=f;break; default: break } const g=ctx.createGain(); g.gain.value=1.0; node.connect(g); return {src, out:g} }
export default function WhiteNoise(){ const {ensure,suspend,masterRef,ctxRef}=useAudio(); const [scene,setScene]=useState<SceneId>('rain'); const [playing,setPlaying]=useState(false); const [volume,setVolume]=useState(0.5); const srcRef=useRef<ReturnType<typeof createNoise>|null>(null); useEffect(()=>{ if(masterRef.current) masterRef.current.gain.value=volume },[volume]); const start=async()=>{ const {ctx,master}=await ensure(); if(srcRef.current){ const node=createNoise(ctx,scene); const gain=(node.out as GainNode); gain.gain.value=0; node.out.connect(master); node.src.start(); const old=srcRef.current; srcRef.current=node; const now=ctx.currentTime; gain.gain.linearRampToValueAtTime(volume, now+0.6); (old.out as GainNode).gain.linearRampToValueAtTime(0, now+0.6); setTimeout(()=>{ try{old.src.stop()}catch{} },650); setPlaying(true); return } const node=createNoise(ctx,scene); node.out.connect(master); node.src.start(); srcRef.current=node; setPlaying(true) }; const pause=async()=>{ if(srcRef.current){ try{srcRef.current.src.stop()}catch{}; srcRef.current=null } await suspend(); setPlaying(false) }; const changeScene=async(s:SceneId)=>{ setScene(s); if(playing) await start() }; useEffect(()=>()=>{ try{ if(srcRef.current){srcRef.current.src.stop(); srcRef.current=null} const ctx=ctxRef.current; if(ctx&&ctx.state==='running') ctx.suspend() }catch{} },[]); return (<div style={{fontFamily:'system-ui, -apple-system, Segoe UI, sans-serif', padding:16, maxWidth:680, margin:'0 auto'}}><h1>🎵 白噪音播放器</h1><p style={{opacity:.8}}>雨/海浪/壁炉/白/粉/褐噪。播放中切换淡入淡出。</p><div style={{display:'grid', gap:12, gridTemplateColumns:'repeat(auto-fit, minmax(160px,1fr))'}}>{(['rain','ocean','fireplace','white','pink','brown'] as SceneId[]).map(id=>(<button key={id} onClick={()=>changeScene(id)} style={{padding:'12px', border:'1px solid #e5e7eb', borderRadius:12, background: scene===id?'#eef2ff':'#fff', cursor:'pointer'}}>{id==='rain'?'🌧️ 下雨声': id==='ocean'?'🌊 海浪声': id==='fireplace'?'🔥 壁炉声': id==='white'?'🤍 白噪音': id==='pink'?'🩷 粉噪音':'🟤 褐噪音'}</button>))}</div><div style={{marginTop:16, display:'flex', gap:12, alignItems:'center', flexWrap:'wrap'}}><button onClick={playing? pause : start} className="btn">{playing? '暂停' : '播放'}</button><label style={{display:'flex', alignItems:'center', gap:8}}>音量<input type="range" min={0} max={1} step={0.01} value={volume} onChange={e=>setVolume(parseFloat(e.target.value))}/></label></div></div>) }
